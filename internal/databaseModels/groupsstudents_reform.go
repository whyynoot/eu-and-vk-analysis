// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package databaseModels

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type groupsstudentsViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *groupsstudentsViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("groupsstudents").
func (v *groupsstudentsViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *groupsstudentsViewType) Columns() []string {
	return []string{
		"group_id",
		"student_id",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *groupsstudentsViewType) NewStruct() reform.Struct {
	return new(Groupsstudents)
}

// GroupsstudentsView represents groupsstudents view or table in SQL database.
var GroupsstudentsView = &groupsstudentsViewType{
	s: parse.StructInfo{
		Type:    "Groupsstudents",
		SQLName: "groupsstudents",
		Fields: []parse.FieldInfo{
			{Name: "GroupID", Type: "int32", Column: "group_id"},
			{Name: "StudentID", Type: "int32", Column: "student_id"},
		},
		PKFieldIndex: -1,
	},
	z: new(Groupsstudents).Values(),
}

// String returns a string representation of this struct or record.
func (s Groupsstudents) String() string {
	res := make([]string, 2)
	res[0] = "GroupID: " + reform.Inspect(s.GroupID, true)
	res[1] = "StudentID: " + reform.Inspect(s.StudentID, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Groupsstudents) Values() []interface{} {
	return []interface{}{
		s.GroupID,
		s.StudentID,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Groupsstudents) Pointers() []interface{} {
	return []interface{}{
		&s.GroupID,
		&s.StudentID,
	}
}

// View returns View object for that struct.
func (s *Groupsstudents) View() reform.View {
	return GroupsstudentsView
}

// check interfaces
var (
	_ reform.View   = GroupsstudentsView
	_ reform.Struct = (*Groupsstudents)(nil)
	_ fmt.Stringer  = (*Groupsstudents)(nil)
)

func init() {
	parse.AssertUpToDate(&GroupsstudentsView.s, new(Groupsstudents))
}
